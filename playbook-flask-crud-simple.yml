---
- name: "Simular despliegue de aplicaci√≥n Flask CRUD (sin Docker)"
  hosts: localhost
  gather_facts: yes
  vars:
    app_name: "flask-crud-demo"
    app_port: "5000"
    fecha_ejecucion: "{{ ansible_date_time.date }}"
    hora_ejecucion: "{{ ansible_date_time.time }}"
  
  tasks:
    - name: "Verificar disponibilidad de Python"
      command: python3 --version
      register: python_check
      ignore_errors: yes
      changed_when: false

    - name: "Crear directorio para la aplicaci√≥n"
      file:
        path: "/tmp/{{ app_name }}"
        state: directory
        mode: '0755'

    - name: "Crear aplicaci√≥n Flask CRUD (archivo principal)"
      copy:
        dest: "/tmp/{{ app_name }}/app.py"
        content: |
          #!/usr/bin/env python3
          """
          Aplicaci√≥n Flask CRUD Demo - Task Manager
          Simulaci√≥n de despliegue para AWX
          """
          
          from flask import Flask, request, jsonify, render_template_string
          import sqlite3
          import os
          from datetime import datetime
          import logging
          import json

          # Configurar logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
          )
          logger = logging.getLogger(__name__)

          app = Flask(__name__)

          def init_db():
              """Inicializar base de datos SQLite"""
              try:
                  conn = sqlite3.connect('/tmp/tasks.db')
                  conn.execute('''
                      CREATE TABLE IF NOT EXISTS tasks (
                          id INTEGER PRIMARY KEY AUTOINCREMENT,
                          title TEXT NOT NULL,
                          description TEXT,
                          status TEXT DEFAULT 'pending',
                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                      )
                  ''')
                  # Insertar datos de ejemplo
                  conn.execute('''
                      INSERT OR IGNORE INTO tasks (id, title, description, status) VALUES 
                      (1, 'Tarea de ejemplo 1', 'Esta es una tarea de demostraci√≥n', 'pending'),
                      (2, 'Tarea completada', 'Ejemplo de tarea terminada', 'completed'),
                      (3, 'Revisar logs', 'Verificar funcionamiento del sistema', 'pending')
                  ''')
                  conn.commit()
                  conn.close()
                  logger.info("Base de datos inicializada correctamente")
                  return True
              except Exception as e:
                  logger.error(f"Error inicializando DB: {e}")
                  return False

          # Template HTML mejorado
          HTML_TEMPLATE = '''
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>üöÄ Task Manager CRUD Demo</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      padding: 20px;
                  }
                  .container { 
                      max-width: 1000px; 
                      margin: 0 auto; 
                      background: white;
                      border-radius: 15px;
                      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                      overflow: hidden;
                  }
                  .header {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      padding: 30px;
                      text-align: center;
                  }
                  .content { padding: 30px; }
                  .stats { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  .stat-card {
                      background: #f8f9fa;
                      padding: 20px;
                      border-radius: 10px;
                      border-left: 4px solid #667eea;
                      text-align: center;
                  }
                  .stat-number { font-size: 2em; font-weight: bold; color: #667eea; }
                  .task { 
                      border: 1px solid #e9ecef; 
                      padding: 20px; 
                      margin: 15px 0; 
                      border-radius: 10px;
                      transition: all 0.3s ease;
                  }
                  .task:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.1); }
                  .pending { border-left: 4px solid #ffc107; background: #fff3cd; }
                  .completed { border-left: 4px solid #28a745; background: #d4edda; }
                  .form-group { margin-bottom: 20px; }
                  input, textarea { 
                      width: 100%; 
                      padding: 12px; 
                      border: 2px solid #e9ecef;
                      border-radius: 8px;
                      font-size: 16px;
                      transition: border-color 0.3s ease;
                  }
                  input:focus, textarea:focus {
                      outline: none;
                      border-color: #667eea;
                  }
                  button { 
                      padding: 12px 24px; 
                      margin: 8px; 
                      border: none;
                      border-radius: 8px;
                      cursor: pointer;
                      font-size: 14px;
                      font-weight: 600;
                      transition: all 0.3s ease;
                  }
                  .btn-primary { background: #667eea; color: white; }
                  .btn-success { background: #28a745; color: white; }
                  .btn-danger { background: #dc3545; color: white; }
                  .btn-info { background: #17a2b8; color: white; }
                  button:hover { transform: translateY(-1px); opacity: 0.9; }
                  .monitoring { 
                      background: #e9ecef; 
                      padding: 20px; 
                      border-radius: 10px; 
                      margin-top: 30px;
                  }
                  .status-indicator {
                      display: inline-block;
                      width: 12px;
                      height: 12px;
                      border-radius: 50%;
                      margin-right: 8px;
                  }
                  .status-online { background: #28a745; }
                  .status-offline { background: #dc3545; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üöÄ Task Manager CRUD Demo</h1>
                      <p>Aplicaci√≥n desplegada con Ansible + AWX</p>
                      <p><span class="status-indicator status-online"></span>Sistema Activo - {{ now }}</p>
                  </div>
                  
                  <div class="content">
                      <div class="stats">
                          <div class="stat-card">
                              <div class="stat-number" id="total">0</div>
                              <div>Total Tareas</div>
                          </div>
                          <div class="stat-card">
                              <div class="stat-number" id="pending">0</div>
                              <div>Pendientes</div>
                          </div>
                          <div class="stat-card">
                              <div class="stat-number" id="completed">0</div>
                              <div>Completadas</div>
                          </div>
                          <div class="stat-card">
                              <div class="stat-number" id="uptime">{{ uptime }}</div>
                              <div>Uptime</div>
                          </div>
                      </div>
                      
                      <h2>‚ûï Crear Nueva Tarea</h2>
                      <form id="taskForm">
                          <div class="form-group">
                              <input type="text" id="title" placeholder="T√≠tulo de la tarea" required>
                          </div>
                          <div class="form-group">
                              <textarea id="description" placeholder="Descripci√≥n (opcional)" rows="3"></textarea>
                          </div>
                          <button type="submit" class="btn-primary">Crear Tarea</button>
                      </form>
                      
                      <h2>üìã Lista de Tareas</h2>
                      <div id="tasks"></div>
                      
                      <div class="monitoring">
                          <h2>üîç Panel de Monitoreo</h2>
                          <button onclick="checkHealth()" class="btn-info">Health Check</button>
                          <button onclick="loadTasks()" class="btn-info">Refrescar</button>
                          <button onclick="exportData()" class="btn-info">Exportar Datos</button>
                          <div id="healthStatus" style="margin-top: 15px;"></div>
                      </div>
                  </div>
              </div>

              <script>
                  let taskData = [];
                  
                  // Cargar tareas al inicio
                  loadTasks();
                  
                  function loadTasks() {
                      fetch('/api/tasks')
                          .then(response => response.json())
                          .then(data => {
                              taskData = data.tasks;
                              displayTasks(data.tasks);
                              updateStats(data.tasks);
                          })
                          .catch(error => {
                              console.error('Error:', error);
                              // Mostrar datos de ejemplo si falla la API
                              showExampleData();
                          });
                  }
                  
                  function showExampleData() {
                      const exampleTasks = [
                          {id: 1, title: 'Configurar servidor web', description: 'Instalar y configurar Nginx', status: 'completed', created_at: '2025-06-26 10:00:00'},
                          {id: 2, title: 'Implementar API REST', description: 'Desarrollar endpoints CRUD', status: 'pending', created_at: '2025-06-26 11:00:00'},
                          {id: 3, title: 'Pruebas de integraci√≥n', description: 'Ejecutar test suite completo', status: 'pending', created_at: '2025-06-26 12:00:00'}
                      ];
                      taskData = exampleTasks;
                      displayTasks(exampleTasks);
                      updateStats(exampleTasks);
                  }
                  
                  function displayTasks(tasks) {
                      const container = document.getElementById('tasks');
                      if (tasks.length === 0) {
                          container.innerHTML = '<p style="text-align: center; color: #666; padding: 40px;">No hay tareas disponibles. ¬°Crea tu primera tarea!</p>';
                          return;
                      }
                      
                      container.innerHTML = tasks.map(task => `
                          <div class="task ${task.status}">
                              <h4>${task.title}</h4>
                              <p>${task.description || 'Sin descripci√≥n'}</p>
                              <p><strong>Estado:</strong> ${task.status} | <strong>Creada:</strong> ${task.created_at}</p>
                              <button onclick="updateTask(${task.id}, '${task.status === 'pending' ? 'completed' : 'pending'}')" class="btn-success">
                                  ${task.status === 'pending' ? '‚úÖ Completar' : 'üîÑ Reabrir'}
                              </button>
                              <button onclick="deleteTask(${task.id})" class="btn-danger">
                                  üóëÔ∏è Eliminar
                              </button>
                          </div>
                      `).join('');
                  }
                  
                  function updateStats(tasks) {
                      const total = tasks.length;
                      const pending = tasks.filter(t => t.status === 'pending').length;
                      const completed = tasks.filter(t => t.status === 'completed').length;
                      
                      document.getElementById('total').textContent = total;
                      document.getElementById('pending').textContent = pending;
                      document.getElementById('completed').textContent = completed;
                  }
                  
                  function checkHealth() {
                      fetch('/health')
                          .then(response => response.json())
                          .then(data => {
                              document.getElementById('healthStatus').innerHTML = `
                                  <div style="background: #d4edda; padding: 15px; border-radius: 8px; border-left: 4px solid #28a745;">
                                      <h4>‚úÖ Estado del Sistema</h4>
                                      <p><strong>Status:</strong> ${data.status}</p>
                                      <p><strong>Tareas en DB:</strong> ${data.task_count}</p>
                                      <p><strong>Timestamp:</strong> ${data.timestamp}</p>
                                      <p><strong>Version:</strong> Flask CRUD Demo v1.0</p>
                                  </div>
                              `;
                          })
                          .catch(error => {
                              document.getElementById('healthStatus').innerHTML = `
                                  <div style="background: #f8d7da; padding: 15px; border-radius: 8px; border-left: 4px solid #dc3545;">
                                      <h4>‚ö†Ô∏è Error de Conectividad</h4>
                                      <p>No se pudo conectar con el backend</p>
                                      <p>Mostrando datos de ejemplo</p>
                                  </div>
                              `;
                          });
                  }
                  
                  function exportData() {
                      const dataStr = JSON.stringify(taskData, null, 2);
                      const dataBlob = new Blob([dataStr], {type: 'application/json'});
                      const url = URL.createObjectURL(dataBlob);
                      const link = document.createElement('a');
                      link.href = url;
                      link.download = 'tasks-export.json';
                      link.click();
                  }
                  
                  // Auto-refresh cada 30 segundos
                  setInterval(loadTasks, 30000);
                  
                  // Mostrar datos de ejemplo al cargar
                  showExampleData();
              </script>
          </body>
          </html>
          '''

          @app.route('/')
          def index():
              return render_template_string(
                  HTML_TEMPLATE, 
                  now=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                  uptime="Demo Mode"
              )

          @app.route('/api/tasks', methods=['GET'])
          def get_tasks():
              try:
                  conn = sqlite3.connect('/tmp/tasks.db')
                  conn.row_factory = sqlite3.Row
                  tasks = conn.execute('SELECT * FROM tasks ORDER BY created_at DESC').fetchall()
                  conn.close()
                  
                  tasks_list = [dict(task) for task in tasks]
                  logger.info(f"API: Consultadas {len(tasks_list)} tareas")
                  return jsonify({'tasks': tasks_list, 'status': 'success'})
              except Exception as e:
                  logger.error(f"Error en get_tasks: {e}")
                  return jsonify({'tasks': [], 'error': str(e)}), 500

          @app.route('/health')
          def health_check():
              try:
                  conn = sqlite3.connect('/tmp/tasks.db')
                  task_count = conn.execute('SELECT COUNT(*) FROM tasks').fetchone()[0]
                  conn.close()
                  
                  return jsonify({
                      'status': 'healthy',
                      'task_count': task_count,
                      'timestamp': datetime.now().isoformat(),
                      'version': '1.0-demo'
                  })
              except Exception as e:
                  return jsonify({
                      'status': 'error',
                      'error': str(e),
                      'timestamp': datetime.now().isoformat()
                  }), 500

          if __name__ == '__main__':
              print("üöÄ Iniciando Flask CRUD Demo...")
              print("=" * 50)
              
              if init_db():
                  print("‚úÖ Base de datos inicializada")
              else:
                  print("‚ùå Error en base de datos")
              
              print(f"üåê Aplicaci√≥n disponible en: http://localhost:5000")
              print("üìä Endpoints disponibles:")
              print("   - GET  /           (Interfaz web)")
              print("   - GET  /api/tasks  (API tareas)")
              print("   - GET  /health     (Health check)")
              print("=" * 50)
              
              # En modo demo, solo mostramos la informaci√≥n
              print("‚úÖ Simulaci√≥n de despliegue completada")
              print("üìù En un entorno real, la aplicaci√≥n estar√≠a corriendo")

    - name: "Crear archivo de configuraci√≥n"
      copy:
        dest: "/tmp/{{ app_name }}/config.json"
        content: |
          {
            "app_name": "{{ app_name }}",
            "port": {{ app_port }},
            "deployed_at": "{{ fecha_ejecucion }} {{ hora_ejecucion }}",
            "environment": "demo",
            "features": [
              "CRUD Operations",
              "REST API",
              "Web Interface",
              "Health Monitoring",
              "SQLite Database"
            ],
            "endpoints": {
              "web": "http://localhost:{{ app_port }}/",
              "api": "http://localhost:{{ app_port }}/api/tasks",
              "health": "http://localhost:{{ app_port }}/health"
            }
          }

    - name: "Simular verificaci√≥n de dependencias"
      debug:
        msg:
          - "üîç Verificando dependencias..."
          - "‚úÖ Python: {{ python_check.stdout | default('No disponible') }}"
          - "‚úÖ SQLite: Disponible (built-in)"
          - "‚úÖ Flask: Se instalar√≠a en contenedor"

    - name: "Simular construcci√≥n de imagen"
      debug:
        msg:
          - "üê≥ Simulando construcci√≥n de imagen Docker..."
          - "üì¶ Copiando archivos de aplicaci√≥n"
          - "üìã Instalando dependencias Python"
          - "‚öôÔ∏è Configurando entorno de ejecuci√≥n"

    - name: "Simular despliegue del contenedor"
      debug:
        msg:
          - "üöÄ Simulando despliegue del contenedor..."
          - "üåê Puerto expuesto: {{ app_port }}"
          - "üìÅ Volumen de datos: /tmp/tasks.db"
          - "üîÑ Estado: Running (simulado)"

    - name: "Crear archivo de logs simulado"
      copy:
        dest: "/tmp/{{ app_name }}/deployment.log"
        content: |
          [{{ fecha_ejecucion }} {{ hora_ejecucion }}] INFO: Iniciando despliegue de {{ app_name }}
          [{{ fecha_ejecucion }} {{ hora_ejecucion }}] INFO: Creando directorio de aplicaci√≥n
          [{{ fecha_ejecucion }} {{ hora_ejecucion }}] INFO: Copiando archivos de aplicaci√≥n
          [{{ fecha_ejecucion }} {{ hora_ejecucion }}] INFO: Configurando base de datos SQLite
          [{{ fecha_ejecucion }} {{ hora_ejecucion }}] INFO: Generando configuraci√≥n JSON
          [{{ fecha_ejecucion }} {{ hora_ejecucion }}] INFO: Simulando construcci√≥n de imagen Docker
          [{{ fecha_ejecucion }} {{ hora_ejecucion }}] INFO: Simulando despliegue de contenedor
          [{{ fecha_ejecucion }} {{ hora_ejecucion }}] INFO: Aplicaci√≥n lista en puerto {{ app_port }}
          [{{ fecha_ejecucion }} {{ hora_ejecucion }}] SUCCESS: Despliegue completado exitosamente

    - name: "Simular health check"
      uri:
        url: "http://httpbin.org/status/200"
        method: GET
      register: health_simulation
      ignore_errors: yes

    - name: "Generar reporte de despliegue"
      copy:
        dest: "/tmp/deployment-report-{{ fecha_ejecucion }}.html"
        content: |
          <!DOCTYPE html>
          <html>
          <head>
              <title>Reporte de Despliegue - {{ app_name }}</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                  .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { background: #007bff; color: white; padding: 20px; margin: -30px -30px 30px -30px; border-radius: 10px 10px 0 0; }
                  .success { color: #28a745; font-weight: bold; }
                  .info { background: #e9ecef; padding: 15px; border-radius: 5px; margin: 15px 0; }
                  .endpoint { background: #f8f9fa; padding: 10px; border-left: 4px solid #007bff; margin: 10px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üöÄ Reporte de Despliegue</h1>
                      <p>{{ app_name }} - {{ fecha_ejecucion }} {{ hora_ejecucion }}</p>
                  </div>
                  
                  <h2 class="success">‚úÖ Despliegue Completado Exitosamente</h2>
                  
                  <div class="info">
                      <h3>üìã Informaci√≥n de la Aplicaci√≥n</h3>
                      <p><strong>Nombre:</strong> {{ app_name }}</p>
                      <p><strong>Puerto:</strong> {{ app_port }}</p>
                      <p><strong>Entorno:</strong> Demo/Simulaci√≥n</p>
                      <p><strong>Base de datos:</strong> SQLite</p>
                  </div>
                  
                  <h3>üåê Endpoints Disponibles</h3>
                  <div class="endpoint">
                      <strong>Interfaz Web:</strong> http://localhost:{{ app_port }}/
                  </div>
                  <div class="endpoint">
                      <strong>API REST:</strong> http://localhost:{{ app_port }}/api/tasks
                  </div>
                  <div class="endpoint">
                      <strong>Health Check:</strong> http://localhost:{{ app_port }}/health
                  </div>
                  
                  <h3>‚ú® Caracter√≠sticas Implementadas</h3>
                  <ul>
                      <li>‚úÖ Operaciones CRUD completas</li>
                      <li>‚úÖ Interfaz web responsive</li>
                      <li>‚úÖ API REST funcional</li>
                      <li>‚úÖ Base de datos SQLite</li>
                      <li>‚úÖ Monitoreo de salud</li>
                      <li>‚úÖ Estad√≠sticas en tiempo real</li>
                      <li>‚úÖ Exportaci√≥n de datos</li>
                  </ul>
                  
                  <div class="info">
                      <h3>üìä Estado del Sistema</h3>
                      <p><strong>Health Check:</strong> {{ 'OK' if health_simulation.status == 200 else 'Simulado' }}</p>
                      <p><strong>Archivos creados:</strong> 4</p>
                      <p><strong>Configuraci√≥n:</strong> Completada</p>
                  </div>
                  
                  <p><em>Reporte generado autom√°ticamente por Ansible AWX</em></p>
              </div>
          </body>
          </html>

    - name: "Mostrar resumen final del despliegue"
      debug:
        msg:
          - "================================"
          - "üéâ DESPLIEGUE SIMULADO COMPLETADO"
          - "================================"
          - "üì± Aplicaci√≥n: {{ app_name }}"
          - "üåê Puerto: {{ app_port }}"
          - "üìÅ Archivos creados en: /tmp/{{ app_name }}/"
          - "üìä Reporte HTML: /tmp/deployment-report-{{ fecha_ejecucion }}.html"
          - "üìù Logs: /tmp/{{ app_name }}/deployment.log"
          - "‚öôÔ∏è Config: /tmp/{{ app_name }}/config.json"
          - "================================"
          - "En un entorno real con Docker:"
          - "üîó Web: http://localhost:{{ app_port }}"
          - "üîó API: http://localhost:{{ app_port }}/api/tasks"
          - "üîó Health: http://localhost:{{ app_port }}/health"
          - "================================"
          - "‚úÖ Simulaci√≥n completada exitosamente"
          - "üïê Ejecutado: {{ fecha_ejecucion }} {{ hora_ejecucion }}"
          - "================================" 