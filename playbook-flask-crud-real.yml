---
- name: "Desplegar aplicación Flask CRUD REAL en AWX"
  hosts: localhost
  gather_facts: yes
  vars:
    app_name: "flask-crud-real"
    app_port: "8080"
    fecha_ejecucion: "{{ ansible_date_time.date }}"
    hora_ejecucion: "{{ ansible_date_time.time }}"
  
  tasks:
    - name: "Verificar disponibilidad de Python"
      command: python3 --version
      register: python_check
      ignore_errors: yes
      changed_when: false

    - name: "Instalar Flask si no está disponible"
      pip:
        name: 
          - flask
          - werkzeug
        state: present
      ignore_errors: yes

    - name: "Crear directorio para la aplicación"
      file:
        path: "/tmp/{{ app_name }}"
        state: directory
        mode: '0755'

    - name: "Crear aplicación Flask CRUD REAL"
      copy:
        dest: "/tmp/{{ app_name }}/app.py"
        mode: '0755'
        content: |
          #!/usr/bin/env python3
          """
          Aplicación Flask CRUD REAL - Ejecutándose en AWX
          """
          
          from flask import Flask, request, jsonify, render_template_string
          import sqlite3
          import os
          from datetime import datetime
          import logging
          import json
          import threading
          import time

          # Configurar logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
              handlers=[
                  logging.FileHandler('/tmp/{{ app_name }}/app.log'),
                  logging.StreamHandler()
              ]
          )
          logger = logging.getLogger(__name__)

          app = Flask(__name__)

          def init_db():
              """Inicializar base de datos SQLite"""
              try:
                  conn = sqlite3.connect('/tmp/{{ app_name }}/tasks.db', check_same_thread=False)
                  conn.execute('''
                      CREATE TABLE IF NOT EXISTS tasks (
                          id INTEGER PRIMARY KEY AUTOINCREMENT,
                          title TEXT NOT NULL,
                          description TEXT,
                          status TEXT DEFAULT 'pending',
                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                      )
                  ''')
                  
                  # Insertar datos de ejemplo si no existen
                  count = conn.execute('SELECT COUNT(*) FROM tasks').fetchone()[0]
                  if count == 0:
                      sample_tasks = [
                          ('Configurar AWX', 'Instalar y configurar AWX en Kubernetes', 'completed'),
                          ('Crear playbooks Ansible', 'Desarrollar playbooks para automatización', 'completed'),
                          ('Desplegar aplicación Flask', 'Crear y desplegar app CRUD en AWX', 'pending'),
                          ('Implementar monitoreo', 'Configurar alertas y dashboards', 'pending'),
                          ('Documentar proceso', 'Crear documentación técnica completa', 'pending'),
                          ('Testing automatizado', 'Implementar tests unitarios y de integración', 'pending')
                      ]
                      
                      for title, desc, status in sample_tasks:
                          conn.execute('INSERT INTO tasks (title, description, status) VALUES (?, ?, ?)', 
                                     (title, desc, status))
                  
                  conn.commit()
                  conn.close()
                  logger.info("Base de datos inicializada correctamente")
                  return True
              except Exception as e:
                  logger.error(f"Error inicializando DB: {e}")
                  return False

          # Template HTML mejorado y completo
          HTML_TEMPLATE = '''
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>🚀 Flask CRUD - Running on AWX!</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      padding: 20px;
                  }
                  .container { 
                      max-width: 1200px; 
                      margin: 0 auto; 
                      background: white;
                      border-radius: 15px;
                      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                      overflow: hidden;
                  }
                  .header {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      padding: 30px;
                      text-align: center;
                  }
                  .badge {
                      display: inline-block;
                      background: rgba(255,255,255,0.2);
                      padding: 5px 15px;
                      border-radius: 20px;
                      font-size: 12px;
                      margin: 5px;
                  }
                  .content { padding: 30px; }
                  .stats { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  .stat-card {
                      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                      padding: 20px;
                      border-radius: 10px;
                      border-left: 4px solid #667eea;
                      text-align: center;
                      transition: transform 0.3s ease;
                  }
                  .stat-card:hover { transform: translateY(-5px); }
                  .stat-number { font-size: 2.5em; font-weight: bold; color: #667eea; }
                  .stat-label { font-size: 14px; color: #666; margin-top: 5px; }
                  .form-section {
                      background: #f8f9fa;
                      padding: 25px;
                      border-radius: 10px;
                      margin-bottom: 30px;
                  }
                  .form-group { margin-bottom: 20px; }
                  input, textarea { 
                      width: 100%; 
                      padding: 12px; 
                      border: 2px solid #e9ecef;
                      border-radius: 8px;
                      font-size: 16px;
                      transition: all 0.3s ease;
                  }
                  input:focus, textarea:focus {
                      outline: none;
                      border-color: #667eea;
                      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                  }
                  button { 
                      padding: 12px 24px; 
                      margin: 8px; 
                      border: none;
                      border-radius: 8px;
                      cursor: pointer;
                      font-size: 14px;
                      font-weight: 600;
                      transition: all 0.3s ease;
                  }
                  .btn-primary { background: #667eea; color: white; }
                  .btn-success { background: #28a745; color: white; }
                  .btn-danger { background: #dc3545; color: white; }
                  .btn-info { background: #17a2b8; color: white; }
                  .btn-warning { background: #ffc107; color: #212529; }
                  button:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
                  .task { 
                      border: 1px solid #e9ecef; 
                      padding: 20px; 
                      margin: 15px 0; 
                      border-radius: 10px;
                      transition: all 0.3s ease;
                      background: white;
                  }
                  .task:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.1); }
                  .pending { border-left: 4px solid #ffc107; }
                  .completed { border-left: 4px solid #28a745; }
                  .in-progress { border-left: 4px solid #17a2b8; }
                  .monitoring { 
                      background: linear-gradient(135deg, #e9ecef 0%, #f8f9fa 100%); 
                      padding: 25px; 
                      border-radius: 10px; 
                      margin-top: 30px;
                  }
                  .status-indicator {
                      display: inline-block;
                      width: 12px;
                      height: 12px;
                      border-radius: 50%;
                      margin-right: 8px;
                      animation: pulse 2s infinite;
                  }
                  .status-online { background: #28a745; }
                  .status-offline { background: #dc3545; }
                  @keyframes pulse {
                      0% { opacity: 1; }
                      50% { opacity: 0.5; }
                      100% { opacity: 1; }
                  }
                  .server-info {
                      background: #d1ecf1;
                      border: 1px solid #bee5eb;
                      border-radius: 8px;
                      padding: 15px;
                      margin: 15px 0;
                  }
                  .alert { padding: 15px; border-radius: 8px; margin: 15px 0; }
                  .alert-success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
                  .alert-info { background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🚀 Flask CRUD App</h1>
                      <p>Running LIVE on AWX Container!</p>
                      <div>
                          <span class="badge">⚡ Real-time</span>
                          <span class="badge">🐳 Containerized</span>
                          <span class="badge">🔄 Auto-refresh</span>
                          <span class="badge">📊 Live Stats</span>
                      </div>
                      <p><span class="status-indicator status-online"></span>Sistema Activo - {{ now }}</p>
                  </div>
                  
                  <div class="content">
                      <div class="alert alert-success">
                          <strong>🎉 ¡Éxito!</strong> Esta aplicación Flask está ejecutándose REALMENTE dentro del contenedor AWX y es accesible desde tu navegador!
                      </div>
                      
                      <div class="server-info">
                          <h4>📡 Información del Servidor</h4>
                          <p><strong>Ejecutándose en:</strong> Contenedor AWX (CentOS/RHEL)</p>
                          <p><strong>Puerto:</strong> {{ app_port }}</p>
                          <p><strong>Base de datos:</strong> SQLite en /tmp/{{ app_name }}/tasks.db</p>
                          <p><strong>Logs:</strong> /tmp/{{ app_name }}/app.log</p>
                      </div>
                      
                      <div class="stats">
                          <div class="stat-card">
                              <div class="stat-number" id="total">0</div>
                              <div class="stat-label">Total Tareas</div>
                          </div>
                          <div class="stat-card">
                              <div class="stat-number" id="pending">0</div>
                              <div class="stat-label">Pendientes</div>
                          </div>
                          <div class="stat-card">
                              <div class="stat-number" id="completed">0</div>
                              <div class="stat-label">Completadas</div>
                          </div>
                          <div class="stat-card">
                              <div class="stat-number" id="uptime">LIVE</div>
                              <div class="stat-label">Estado</div>
                          </div>
                      </div>
                      
                      <div class="form-section">
                          <h2>➕ Crear Nueva Tarea</h2>
                          <form id="taskForm">
                              <div class="form-group">
                                  <input type="text" id="title" placeholder="Título de la tarea" required>
                              </div>
                              <div class="form-group">
                                  <textarea id="description" placeholder="Descripción detallada (opcional)" rows="3"></textarea>
                              </div>
                              <button type="submit" class="btn-primary">✅ Crear Tarea</button>
                              <button type="button" onclick="loadTasks()" class="btn-info">🔄 Refrescar</button>
                          </form>
                      </div>
                      
                      <h2>📋 Gestión de Tareas</h2>
                      <div id="tasks"></div>
                      
                      <div class="monitoring">
                          <h2>🔍 Panel de Monitoreo en Tiempo Real</h2>
                          <button onclick="checkHealth()" class="btn-info">🏥 Health Check</button>
                          <button onclick="loadTasks()" class="btn-info">🔄 Refrescar Datos</button>
                          <button onclick="exportData()" class="btn-warning">📤 Exportar JSON</button>
                          <button onclick="clearCompleted()" class="btn-danger">🗑️ Limpiar Completadas</button>
                          <div id="healthStatus" style="margin-top: 15px;"></div>
                      </div>
                  </div>
              </div>

              <script>
                  let taskData = [];
                  let refreshInterval;
                  
                  // Cargar tareas al inicio
                  document.addEventListener('DOMContentLoaded', function() {
                      loadTasks();
                      startAutoRefresh();
                  });
                  
                  function startAutoRefresh() {
                      refreshInterval = setInterval(loadTasks, 15000); // Cada 15 segundos
                  }
                  
                  function loadTasks() {
                      fetch('/api/tasks')
                          .then(response => response.json())
                          .then(data => {
                              if (data.tasks) {
                                  taskData = data.tasks;
                                  displayTasks(data.tasks);
                                  updateStats(data.tasks);
                              }
                          })
                          .catch(error => {
                              console.error('Error:', error);
                              showError('Error cargando tareas: ' + error.message);
                          });
                  }
                  
                  function displayTasks(tasks) {
                      const container = document.getElementById('tasks');
                      if (tasks.length === 0) {
                          container.innerHTML = '<div class="alert alert-info">📝 No hay tareas disponibles. ¡Crea tu primera tarea!</div>';
                          return;
                      }
                      
                      container.innerHTML = tasks.map(task => `
                          <div class="task ${task.status}">
                              <h4>📌 ${task.title}</h4>
                              <p>${task.description || 'Sin descripción'}</p>
                              <p><strong>Estado:</strong> 
                                  <span style="color: ${task.status === 'completed' ? '#28a745' : '#ffc107'}">
                                      ${task.status === 'completed' ? '✅ Completada' : '⏳ Pendiente'}
                                  </span>
                              </p>
                              <p><strong>Creada:</strong> ${task.created_at}</p>
                              <div style="margin-top: 15px;">
                                  <button onclick="updateTask(${task.id}, '${task.status === 'pending' ? 'completed' : 'pending'}')" 
                                          class="${task.status === 'pending' ? 'btn-success' : 'btn-warning'}">
                                      ${task.status === 'pending' ? '✅ Marcar Completada' : '🔄 Reabrir Tarea'}
                                  </button>
                                  <button onclick="deleteTask(${task.id})" class="btn-danger">
                                      🗑️ Eliminar
                                  </button>
                              </div>
                          </div>
                      `).join('');
                  }
                  
                  function updateStats(tasks) {
                      const total = tasks.length;
                      const pending = tasks.filter(t => t.status === 'pending').length;
                      const completed = tasks.filter(t => t.status === 'completed').length;
                      
                      document.getElementById('total').textContent = total;
                      document.getElementById('pending').textContent = pending;
                      document.getElementById('completed').textContent = completed;
                  }
                  
                  // Crear tarea
                  document.getElementById('taskForm').addEventListener('submit', function(e) {
                      e.preventDefault();
                      const title = document.getElementById('title').value.trim();
                      const description = document.getElementById('description').value.trim();
                      
                      if (!title) return;
                      
                      fetch('/api/tasks', {
                          method: 'POST',
                          headers: {'Content-Type': 'application/json'},
                          body: JSON.stringify({title, description})
                      }).then(response => response.json())
                        .then(data => {
                            document.getElementById('title').value = '';
                            document.getElementById('description').value = '';
                            loadTasks();
                            showSuccess('Tarea creada exitosamente!');
                        })
                        .catch(error => showError('Error creando tarea: ' + error.message));
                  });
                  
                  function updateTask(id, status) {
                      fetch(`/api/tasks/${id}`, {
                          method: 'PUT',
                          headers: {'Content-Type': 'application/json'},
                          body: JSON.stringify({status})
                      }).then(response => response.json())
                        .then(data => {
                            loadTasks();
                            showSuccess(`Tarea ${status === 'completed' ? 'completada' : 'reabierta'}!`);
                        })
                        .catch(error => showError('Error actualizando tarea: ' + error.message));
                  }
                  
                  function deleteTask(id) {
                      if (confirm('¿Estás seguro de eliminar esta tarea?')) {
                          fetch(`/api/tasks/${id}`, {method: 'DELETE'})
                              .then(response => response.json())
                              .then(data => {
                                  loadTasks();
                                  showSuccess('Tarea eliminada exitosamente!');
                              })
                              .catch(error => showError('Error eliminando tarea: ' + error.message));
                      }
                  }
                  
                  function checkHealth() {
                      fetch('/health')
                          .then(response => response.json())
                          .then(data => {
                              document.getElementById('healthStatus').innerHTML = `
                                  <div class="alert alert-success">
                                      <h4>✅ Sistema Saludable</h4>
                                      <p><strong>Status:</strong> ${data.status}</p>
                                      <p><strong>Tareas en DB:</strong> ${data.task_count}</p>
                                      <p><strong>Timestamp:</strong> ${data.timestamp}</p>
                                      <p><strong>Versión:</strong> ${data.version}</p>
                                      <p><strong>Uptime:</strong> ${data.uptime || 'N/A'}</p>
                                  </div>
                              `;
                          })
                          .catch(error => {
                              document.getElementById('healthStatus').innerHTML = `
                                  <div class="alert alert-danger">
                                      <h4>⚠️ Error de Sistema</h4>
                                      <p>No se pudo verificar el estado del sistema</p>
                                      <p>Error: ${error.message}</p>
                                  </div>
                              `;
                          });
                  }
                  
                  function exportData() {
                      const dataStr = JSON.stringify(taskData, null, 2);
                      const dataBlob = new Blob([dataStr], {type: 'application/json'});
                      const url = URL.createObjectURL(dataBlob);
                      const link = document.createElement('a');
                      link.href = url;
                      link.download = `tasks-export-${new Date().toISOString().split('T')[0]}.json`;
                      link.click();
                      showSuccess('Datos exportados exitosamente!');
                  }
                  
                  function clearCompleted() {
                      if (confirm('¿Eliminar todas las tareas completadas?')) {
                          const completedTasks = taskData.filter(t => t.status === 'completed');
                          Promise.all(completedTasks.map(task => 
                              fetch(`/api/tasks/${task.id}`, {method: 'DELETE'})
                          )).then(() => {
                              loadTasks();
                              showSuccess(`${completedTasks.length} tareas completadas eliminadas!`);
                          }).catch(error => showError('Error eliminando tareas: ' + error.message));
                      }
                  }
                  
                  function showSuccess(message) {
                      showNotification(message, 'success');
                  }
                  
                  function showError(message) {
                      showNotification(message, 'error');
                  }
                  
                  function showNotification(message, type) {
                      const notification = document.createElement('div');
                      notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'}`;
                      notification.style.position = 'fixed';
                      notification.style.top = '20px';
                      notification.style.right = '20px';
                      notification.style.zIndex = '9999';
                      notification.style.minWidth = '300px';
                      notification.innerHTML = `
                          <strong>${type === 'success' ? '✅' : '❌'}</strong> ${message}
                          <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
                      `;
                      document.body.appendChild(notification);
                      
                      setTimeout(() => {
                          if (notification.parentElement) {
                              notification.remove();
                          }
                      }, 5000);
                  }
              </script>
          </body>
          </html>
          '''

          @app.route('/')
          def index():
              return render_template_string(
                  HTML_TEMPLATE, 
                  now=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                  app_name="{{ app_name }}",
                  app_port="{{ app_port }}"
              )

          @app.route('/api/tasks', methods=['GET'])
          def get_tasks():
              try:
                  conn = sqlite3.connect('/tmp/{{ app_name }}/tasks.db')
                  conn.row_factory = sqlite3.Row
                  tasks = conn.execute('SELECT * FROM tasks ORDER BY created_at DESC').fetchall()
                  conn.close()
                  
                  tasks_list = [dict(task) for task in tasks]
                  logger.info(f"API: Consultadas {len(tasks_list)} tareas")
                  return jsonify({'tasks': tasks_list, 'status': 'success'})
              except Exception as e:
                  logger.error(f"Error en get_tasks: {e}")
                  return jsonify({'tasks': [], 'error': str(e)}), 500

          @app.route('/api/tasks', methods=['POST'])
          def create_task():
              try:
                  data = request.json
                  conn = sqlite3.connect('/tmp/{{ app_name }}/tasks.db')
                  conn.execute('INSERT INTO tasks (title, description) VALUES (?, ?)', 
                              (data['title'], data.get('description', '')))
                  conn.commit()
                  conn.close()
                  
                  logger.info(f"Tarea creada: {data['title']}")
                  return jsonify({'message': 'Task created successfully', 'status': 'success'}), 201
              except Exception as e:
                  logger.error(f"Error creando tarea: {e}")
                  return jsonify({'error': str(e)}), 500

          @app.route('/api/tasks/<int:task_id>', methods=['PUT'])
          def update_task(task_id):
              try:
                  data = request.json
                  conn = sqlite3.connect('/tmp/{{ app_name }}/tasks.db')
                  conn.execute('UPDATE tasks SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?', 
                              (data['status'], task_id))
                  conn.commit()
                  conn.close()
                  
                  logger.info(f"Tarea {task_id} actualizada a {data['status']}")
                  return jsonify({'message': 'Task updated successfully', 'status': 'success'})
              except Exception as e:
                  logger.error(f"Error actualizando tarea: {e}")
                  return jsonify({'error': str(e)}), 500

          @app.route('/api/tasks/<int:task_id>', methods=['DELETE'])
          def delete_task(task_id):
              try:
                  conn = sqlite3.connect('/tmp/{{ app_name }}/tasks.db')
                  conn.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
                  conn.commit()
                  conn.close()
                  
                  logger.info(f"Tarea {task_id} eliminada")
                  return jsonify({'message': 'Task deleted successfully', 'status': 'success'})
              except Exception as e:
                  logger.error(f"Error eliminando tarea: {e}")
                  return jsonify({'error': str(e)}), 500

          @app.route('/health')
          def health_check():
              try:
                  conn = sqlite3.connect('/tmp/{{ app_name }}/tasks.db')
                  task_count = conn.execute('SELECT COUNT(*) FROM tasks').fetchone()[0]
                  conn.close()
                  
                  return jsonify({
                      'status': 'healthy',
                      'task_count': task_count,
                      'timestamp': datetime.now().isoformat(),
                      'version': '2.0-real',
                      'environment': 'AWX Container',
                      'uptime': 'running'
                  })
              except Exception as e:
                  return jsonify({
                      'status': 'error',
                      'error': str(e),
                      'timestamp': datetime.now().isoformat()
                  }), 500

          @app.route('/api/stats')
          def get_stats():
              try:
                  conn = sqlite3.connect('/tmp/{{ app_name }}/tasks.db')
                  total = conn.execute('SELECT COUNT(*) FROM tasks').fetchone()[0]
                  pending = conn.execute('SELECT COUNT(*) FROM tasks WHERE status = "pending"').fetchone()[0]
                  completed = conn.execute('SELECT COUNT(*) FROM tasks WHERE status = "completed"').fetchone()[0]
                  conn.close()
                  
                  return jsonify({
                      'total': total,
                      'pending': pending,
                      'completed': completed,
                      'completion_rate': round((completed / total * 100) if total > 0 else 0, 1)
                  })
              except Exception as e:
                  return jsonify({'error': str(e)}), 500

          if __name__ == '__main__':
              print("🚀 Iniciando Flask CRUD REAL en AWX...")
              print("=" * 60)
              
              if init_db():
                  print("✅ Base de datos inicializada correctamente")
              else:
                  print("❌ Error en base de datos")
                  exit(1)
              
              print(f"🌐 Aplicación iniciando en puerto {{ app_port }}")
              print(f"📊 Endpoints disponibles:")
              print(f"   - GET  /           (Interfaz web)")
              print(f"   - GET  /api/tasks  (API tareas)")
              print(f"   - POST /api/tasks  (Crear tarea)")
              print(f"   - PUT  /api/tasks/<id> (Actualizar)")
              print(f"   - DELETE /api/tasks/<id> (Eliminar)")
              print(f"   - GET  /health     (Health check)")
              print(f"   - GET  /api/stats  (Estadísticas)")
              print("=" * 60)
              
              logger.info("Iniciando servidor Flask...")
              app.run(host='0.0.0.0', port={{ app_port }}, debug=False, threaded=True)

    - name: "Crear script de inicio"
      copy:
        dest: "/tmp/{{ app_name }}/start.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          cd /tmp/{{ app_name }}
          echo "🚀 Iniciando Flask CRUD App..."
          python3 app.py > /tmp/{{ app_name }}/server.log 2>&1 &
          echo $! > /tmp/{{ app_name }}/app.pid
          echo "✅ Aplicación iniciada con PID $(cat /tmp/{{ app_name }}/app.pid)"
          echo "🌐 Accesible en: http://localhost:{{ app_port }}"

    - name: "Crear script de parada"
      copy:
        dest: "/tmp/{{ app_name }}/stop.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          if [ -f /tmp/{{ app_name }}/app.pid ]; then
              PID=$(cat /tmp/{{ app_name }}/app.pid)
              if kill -0 $PID 2>/dev/null; then
                  echo "🛑 Deteniendo aplicación (PID: $PID)..."
                  kill $PID
                  rm /tmp/{{ app_name }}/app.pid
                  echo "✅ Aplicación detenida"
              else
                  echo "⚠️ Proceso no encontrado"
                  rm -f /tmp/{{ app_name }}/app.pid
              fi
          else
              echo "⚠️ Archivo PID no encontrado"
          fi

    - name: "Verificar si ya hay una instancia corriendo"
      shell: ps aux | grep "python3.*{{ app_name }}" | grep -v grep
      register: running_instances
      ignore_errors: yes
      changed_when: false

    - name: "Detener instancias previas si existen"
      shell: pkill -f "python3.*{{ app_name }}"
      when: running_instances.stdout != ""
      ignore_errors: yes

    - name: "Esperar un momento para que se liberen los recursos"
      pause:
        seconds: 3
      when: running_instances.stdout != ""

    - name: "Iniciar aplicación Flask en background"
      shell: |
        cd /tmp/{{ app_name }}
        nohup python3 app.py > server.log 2>&1 &
        echo $! > app.pid
        sleep 2
      async: 0
      poll: 0

    - name: "Esperar a que la aplicación esté lista"
      wait_for:
        port: "{{ app_port }}"
        host: "127.0.0.1"
        delay: 3
        timeout: 30
      ignore_errors: yes

    - name: "Verificar que la aplicación está corriendo"
      uri:
        url: "http://127.0.0.1:{{ app_port }}/health"
        method: GET
        timeout: 10
      register: health_check
      ignore_errors: yes
      retries: 3
      delay: 2

    - name: "Obtener información del proceso"
      shell: |
        if [ -f /tmp/{{ app_name }}/app.pid ]; then
          PID=$(cat /tmp/{{ app_name }}/app.pid)
          if kill -0 $PID 2>/dev/null; then
            echo "PID: $PID - RUNNING"
            ps aux | grep $PID | grep -v grep
          else
            echo "PID: $PID - NOT FOUND"
          fi
        else
          echo "NO PID FILE"
        fi
      register: process_info
      ignore_errors: yes
      changed_when: false

    - name: "Verificar logs de la aplicación"
      shell: tail -10 /tmp/{{ app_name }}/server.log
      register: app_logs
      ignore_errors: yes
      changed_when: false

    - name: "Configurar acceso externo (intentar port-forward)"
      shell: |
        # Intentar encontrar el pod de AWX donde estamos corriendo
        POD_NAME=$(hostname)
        echo "Corriendo en: $POD_NAME"
        
        # Verificar puertos abiertos
        netstat -tlnp 2>/dev/null | grep :{{ app_port }} || echo "Puerto no visible en netstat"
        
        # Verificar si podemos hacer curl local
        curl -s http://127.0.0.1:{{ app_port }}/health | head -5 || echo "Curl local falló"
      register: network_info
      ignore_errors: yes
      changed_when: false

    - name: "Crear reporte de despliegue REAL"
      copy:
        dest: "/tmp/flask-crud-real-report-{{ fecha_ejecucion }}.html"
        content: |
          <!DOCTYPE html>
          <html>
          <head>
              <title>🚀 Flask CRUD REAL - Reporte de Despliegue</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                  .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { background: linear-gradient(135deg, #28a745, #20c997); color: white; padding: 20px; margin: -30px -30px 30px -30px; border-radius: 10px 10px 0 0; }
                  .success { color: #28a745; font-weight: bold; }
                  .error { color: #dc3545; font-weight: bold; }
                  .info { background: #e9ecef; padding: 15px; border-radius: 5px; margin: 15px 0; }
                  .endpoint { background: #f8f9fa; padding: 10px; border-left: 4px solid #007bff; margin: 10px 0; font-family: monospace; }
                  .status { padding: 10px; border-radius: 5px; margin: 10px 0; }
                  .status.success { background: #d4edda; border: 1px solid #c3e6cb; }
                  .status.error { background: #f8d7da; border: 1px solid #f5c6cb; }
                  pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🚀 Flask CRUD REAL - Despliegue Exitoso</h1>
                      <p>Aplicación ejecutándose REALMENTE en AWX</p>
                      <p>{{ fecha_ejecucion }} {{ hora_ejecucion }}</p>
                  </div>
                  
                  <div class="status {{ 'success' if health_check.status == 200 else 'error' }}">
                      <h2>{{ '✅ APLICACIÓN FUNCIONANDO' if health_check.status == 200 else '❌ ERROR EN APLICACIÓN' }}</h2>
                      <p><strong>Health Check:</strong> {{ health_check.status | default('Error') }}</p>
                      {% if health_check.json is defined %}
                      <p><strong>Estado:</strong> {{ health_check.json.status }}</p>
                      <p><strong>Tareas en DB:</strong> {{ health_check.json.task_count }}</p>
                      <p><strong>Versión:</strong> {{ health_check.json.version }}</p>
                      {% endif %}
                  </div>
                  
                  <div class="info">
                      <h3>📋 Información de Despliegue</h3>
                      <p><strong>Aplicación:</strong> {{ app_name }}</p>
                      <p><strong>Puerto:</strong> {{ app_port }}</p>
                      <p><strong>Directorio:</strong> /tmp/{{ app_name }}/</p>
                      <p><strong>Base de datos:</strong> SQLite (/tmp/{{ app_name }}/tasks.db)</p>
                      <p><strong>Logs:</strong> /tmp/{{ app_name }}/server.log</p>
                  </div>
                  
                  <h3>🌐 Endpoints de la API</h3>
                  <div class="endpoint">GET http://[AWX-CONTAINER]:{{ app_port }}/ - Interfaz web</div>
                  <div class="endpoint">GET http://[AWX-CONTAINER]:{{ app_port }}/api/tasks - Listar tareas</div>
                  <div class="endpoint">POST http://[AWX-CONTAINER]:{{ app_port }}/api/tasks - Crear tarea</div>
                  <div class="endpoint">PUT http://[AWX-CONTAINER]:{{ app_port }}/api/tasks/[id] - Actualizar</div>
                  <div class="endpoint">DELETE http://[AWX-CONTAINER]:{{ app_port }}/api/tasks/[id] - Eliminar</div>
                  <div class="endpoint">GET http://[AWX-CONTAINER]:{{ app_port }}/health - Health check</div>
                  
                  <h3>📊 Estado del Proceso</h3>
                  <pre>{{ process_info.stdout | default('No disponible') }}</pre>
                  
                  <h3>📝 Logs de la Aplicación</h3>
                  <pre>{{ app_logs.stdout | default('No disponible') }}</pre>
                  
                  <h3>🌐 Información de Red</h3>
                  <pre>{{ network_info.stdout | default('No disponible') }}</pre>
                  
                  <div class="info">
                      <h3>🔧 Comandos de Gestión</h3>
                      <p><strong>Ver logs en tiempo real:</strong><br>
                      <code>tail -f /tmp/{{ app_name }}/server.log</code></p>
                      
                      <p><strong>Detener aplicación:</strong><br>
                      <code>bash /tmp/{{ app_name }}/stop.sh</code></p>
                      
                      <p><strong>Reiniciar aplicación:</strong><br>
                      <code>bash /tmp/{{ app_name }}/start.sh</code></p>
                      
                      <p><strong>Ver proceso:</strong><br>
                      <code>ps aux | grep flask-crud-real</code></p>
                  </div>
                  
                  {% if health_check.status != 200 %}
                  <div class="status error">
                      <h3>🔧 Troubleshooting</h3>
                      <p>La aplicación no responde correctamente. Posibles causas:</p>
                      <ul>
                          <li>Puerto {{ app_port }} bloqueado o en uso</li>
                          <li>Permisos insuficientes</li>
                          <li>Error en dependencias Python</li>
                          <li>Proceso terminado inesperadamente</li>
                      </ul>
                      <p>Revisa los logs en: <code>/tmp/{{ app_name }}/server.log</code></p>
                  </div>
                  {% endif %}
                  
                  <p><em>Reporte generado automáticamente por Ansible AWX</em></p>
              </div>
          </body>
          </html>

    - name: "Mostrar resumen final del despliegue REAL"
      debug:
        msg:
          - "================================"
          - "🎉 FLASK CRUD REAL DESPLEGADO!"
          - "================================"
          - "📱 Aplicación: {{ app_name }}"
          - "🌐 Puerto: {{ app_port }}"
          - "📁 Directorio: /tmp/{{ app_name }}/"
          - "🔍 Health Check: {{ 'OK ✅' if health_check.status == 200 else 'ERROR ❌' }}"
          - "📊 Proceso: {{ process_info.stdout.split('\n')[0] | default('No info') }}"
          - "================================"
          - "🌐 ACCESO (si funciona el port-forward):"
          - "   http://localhost:{{ app_port }}"
          - "================================"
          - "📝 GESTIÓN:"
          - "   Logs: tail -f /tmp/{{ app_name }}/server.log"
          - "   Stop: bash /tmp/{{ app_name }}/stop.sh"
          - "   Start: bash /tmp/{{ app_name }}/start.sh"
          - "================================"
          - "📊 Reporte: /tmp/flask-crud-real-report-{{ fecha_ejecucion }}.html"
          - "🕐 Desplegado: {{ fecha_ejecucion }} {{ hora_ejecucion }}"
          - "================================"

    - name: "Información adicional para acceso"
      debug:
        msg:
          - "🔧 NOTA TÉCNICA:"
          - "La aplicación está corriendo DENTRO del contenedor AWX"
          - "Para acceso externo necesitas:"
          - "1. Port-forward del contenedor AWX"
          - "2. O configurar ingress/service en Kubernetes"
          - "3. Comando sugerido:"
          - "   kubectl port-forward -n awx deployment/awx-local-task {{ app_port }}:{{ app_port }}"
          - "================================"
          - "🎯 ESTADO ACTUAL:"
          - "   Health Check: {{ health_check.status | default('No response') }}"
          - "   Proceso: {{ 'Running' if process_info.stdout.find('RUNNING') != -1 else 'Check logs' }}"
          - "================================" 