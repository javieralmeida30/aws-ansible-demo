---
- name: "🌐 Test Servidor Web SIMPLE"
  hosts: localhost
  gather_facts: no
  vars:
    puerto: "7777"
    
  tasks:
    - name: "🎯 Información"
      debug:
        msg:
          - "🚀 Iniciando servidor web simple"
          - "🌐 Puerto: {{ puerto }}"
          - "⏰ Duración: 30 segundos"

    - name: "🌐 Servidor Web Python - VERSIÓN SIMPLE"
      shell: |
        python3 -c "
        import http.server
        import socketserver
        import threading
        import time
        
        PORT = {{ puerto }}
        
        class Handler(http.server.BaseHTTPRequestHandler):
            def do_GET(self):
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                html = '''
                <!DOCTYPE html>
                <html>
                <head>
                    <title>FUNCIONA!</title>
                    <style>
                        body { 
                            font-family: Arial; 
                            text-align: center; 
                            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                            color: white;
                            padding: 50px;
                        }
                        h1 { font-size: 4em; animation: bounce 1s infinite; }
                        @keyframes bounce {
                            0%, 100% { transform: translateY(0); }
                            50% { transform: translateY(-20px); }
                        }
                    </style>
                </head>
                <body>
                    <h1>🚀 ¡FUNCIONA!</h1>
                    <h2>✅ Servidor desde AWX</h2>
                    <p>Puerto: {{ puerto }}</p>
                    <p>🎉 ¡Lo logramos!</p>
                </body>
                </html>
                '''
                self.wfile.write(html.encode())
            
            def log_message(self, format, *args):
                pass
        
        print('🚀 Servidor iniciando...')
        try:
            with socketserver.TCPServer(('', PORT), Handler) as httpd:
                print(f'✅ Servidor ACTIVO en puerto {PORT}')
                
                def stop_server():
                    time.sleep(30)
                    httpd.shutdown()
                
                threading.Thread(target=stop_server, daemon=True).start()
                httpd.serve_forever()
                
        except Exception as e:
            print(f'❌ Error: {e}')
        
        print('⏰ Servidor terminado')
        " &
        
        echo "🔄 Esperando 2 segundos..."
        sleep 2
        
        # Verificar si el servidor está corriendo
        if netstat -tln 2>/dev/null | grep :{{ puerto }} >/dev/null; then
          echo "✅ Puerto {{ puerto }} ABIERTO"
        else
          echo "❌ Puerto {{ puerto }} NO disponible"
        fi
        
        echo "🎯 Servidor lanzado en background"
      register: servidor_output

    - name: "📊 Resultado del servidor"
      debug:
        msg: "{{ servidor_output.stdout_lines }}"

    - name: "⏳ Verificar puerto"
      wait_for:
        port: "{{ puerto }}"
        host: "127.0.0.1"
        delay: 1
        timeout: 5
      ignore_errors: yes
      register: puerto_check

    - name: "🎉 RESULTADO"
      debug:
        msg:
          - "================================"
          - "🌐 SERVIDOR WEB TEST"
          - "================================"
          - "Puerto {{ puerto }}: {{ 'ABIERTO ✅' if puerto_check is succeeded else 'CERRADO ❌' }}"
          - "================================"
          - "🚀 PARA ACCEDER:"
          - "kubectl port-forward -n awx deployment/awx-local-task {{ puerto }}:{{ puerto }}"
          - "http://localhost:{{ puerto }}"
          - "================================"
          - "⏰ Servidor activo por 30 segundos"
          - "================================"

    - name: "⏳ Mantener playbook activo 30 segundos"
      pause:
        seconds: 30
        prompt: "🌐 Servidor activo - Accede a http://localhost:{{ puerto }} (port-forward en otra terminal)"

    - name: "✅ Completado"
      debug:
        msg: "�� Test completado" 