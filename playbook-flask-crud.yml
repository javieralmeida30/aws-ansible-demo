---
- name: "Desplegar aplicaci√≥n Flask CRUD con monitoreo"
  hosts: localhost
  gather_facts: yes
  vars:
    app_name: "flask-crud-demo"
    app_port: "5000"
    fecha_ejecucion: "{{ ansible_date_time.date }}"
    hora_ejecucion: "{{ ansible_date_time.time }}"
  
  tasks:
    - name: "Crear directorio para la aplicaci√≥n"
      file:
        path: "/tmp/{{ app_name }}"
        state: directory
        mode: '0755'

    - name: "Crear aplicaci√≥n Flask CRUD"
      copy:
        dest: "/tmp/{{ app_name }}/app.py"
        content: |
          from flask import Flask, request, jsonify, render_template_string
          import sqlite3
          import os
          from datetime import datetime
          import logging

          # Configurar logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          app = Flask(__name__)

          # Inicializar base de datos
          def init_db():
              conn = sqlite3.connect('tasks.db')
              conn.execute('''
                  CREATE TABLE IF NOT EXISTS tasks (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      title TEXT NOT NULL,
                      description TEXT,
                      status TEXT DEFAULT 'pending',
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                  )
              ''')
              conn.commit()
              conn.close()
              logger.info("Base de datos inicializada")

          # HTML Template
          HTML_TEMPLATE = '''
          <!DOCTYPE html>
          <html>
          <head>
              <title>CRUD Demo - Task Manager</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .task { border: 1px solid #ddd; padding: 10px; margin: 10px 0; border-radius: 5px; }
                  .pending { background-color: #fff3cd; }
                  .completed { background-color: #d4edda; }
                  button { padding: 5px 10px; margin: 5px; cursor: pointer; }
                  input, textarea { width: 100%; padding: 8px; margin: 5px 0; }
                  .stats { background-color: #e9ecef; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üöÄ Task Manager CRUD Demo</h1>
                  <div class="stats">
                      <h3>üìä Estad√≠sticas en Tiempo Real</h3>
                      <p>Total tareas: <span id="total">0</span></p>
                      <p>Pendientes: <span id="pending">0</span></p>
                      <p>Completadas: <span id="completed">0</span></p>
                      <p>√öltima actualizaci√≥n: <span id="lastUpdate">{{ now }}</span></p>
                  </div>
                  
                  <h2>‚ûï Crear Nueva Tarea</h2>
                  <form id="taskForm">
                      <input type="text" id="title" placeholder="T√≠tulo de la tarea" required>
                      <textarea id="description" placeholder="Descripci√≥n (opcional)"></textarea>
                      <button type="submit">Crear Tarea</button>
                  </form>
                  
                  <h2>üìã Lista de Tareas</h2>
                  <div id="tasks"></div>
                  
                  <h2>üîç Monitoreo</h2>
                  <div class="stats">
                      <button onclick="checkHealth()">Health Check</button>
                      <button onclick="loadTasks()">Refrescar</button>
                      <div id="healthStatus"></div>
                  </div>
              </div>

              <script>
                  // Cargar tareas al inicio
                  loadTasks();
                  
                  // Funci√≥n para cargar tareas
                  function loadTasks() {
                      fetch('/api/tasks')
                          .then(response => response.json())
                          .then(data => {
                              displayTasks(data.tasks);
                              updateStats(data.tasks);
                              document.getElementById('lastUpdate').textContent = new Date().toLocaleString();
                          });
                  }
                  
                  // Mostrar tareas
                  function displayTasks(tasks) {
                      const container = document.getElementById('tasks');
                      container.innerHTML = tasks.map(task => `
                          <div class="task ${task.status}">
                              <h4>${task.title}</h4>
                              <p>${task.description || 'Sin descripci√≥n'}</p>
                              <p><strong>Estado:</strong> ${task.status} | <strong>Creada:</strong> ${task.created_at}</p>
                              <button onclick="updateTask(${task.id}, '${task.status === 'pending' ? 'completed' : 'pending'}')">
                                  ${task.status === 'pending' ? 'Completar' : 'Marcar Pendiente'}
                              </button>
                              <button onclick="deleteTask(${task.id})" style="background-color: #dc3545; color: white;">
                                  Eliminar
                              </button>
                          </div>
                      `).join('');
                  }
                  
                  // Actualizar estad√≠sticas
                  function updateStats(tasks) {
                      const total = tasks.length;
                      const pending = tasks.filter(t => t.status === 'pending').length;
                      const completed = tasks.filter(t => t.status === 'completed').length;
                      
                      document.getElementById('total').textContent = total;
                      document.getElementById('pending').textContent = pending;
                      document.getElementById('completed').textContent = completed;
                  }
                  
                  // Crear tarea
                  document.getElementById('taskForm').addEventListener('submit', function(e) {
                      e.preventDefault();
                      const title = document.getElementById('title').value;
                      const description = document.getElementById('description').value;
                      
                      fetch('/api/tasks', {
                          method: 'POST',
                          headers: {'Content-Type': 'application/json'},
                          body: JSON.stringify({title, description})
                      }).then(() => {
                          document.getElementById('title').value = '';
                          document.getElementById('description').value = '';
                          loadTasks();
                      });
                  });
                  
                  // Actualizar tarea
                  function updateTask(id, status) {
                      fetch(`/api/tasks/${id}`, {
                          method: 'PUT',
                          headers: {'Content-Type': 'application/json'},
                          body: JSON.stringify({status})
                      }).then(() => loadTasks());
                  }
                  
                  // Eliminar tarea
                  function deleteTask(id) {
                      if (confirm('¬øEst√°s seguro de eliminar esta tarea?')) {
                          fetch(`/api/tasks/${id}`, {method: 'DELETE'})
                              .then(() => loadTasks());
                      }
                  }
                  
                  // Health check
                  function checkHealth() {
                      fetch('/health')
                          .then(response => response.json())
                          .then(data => {
                              document.getElementById('healthStatus').innerHTML = `
                                  <h4>Estado del Sistema:</h4>
                                  <p>Status: ${data.status}</p>
                                  <p>Uptime: ${data.uptime}</p>
                                  <p>Tareas en DB: ${data.task_count}</p>
                                  <p>Timestamp: ${data.timestamp}</p>
                              `;
                          });
                  }
                  
                  // Auto-refresh cada 30 segundos
                  setInterval(loadTasks, 30000);
              </script>
          </body>
          </html>
          '''

          @app.route('/')
          def index():
              return render_template_string(HTML_TEMPLATE, now=datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

          @app.route('/api/tasks', methods=['GET'])
          def get_tasks():
              conn = sqlite3.connect('tasks.db')
              conn.row_factory = sqlite3.Row
              tasks = conn.execute('SELECT * FROM tasks ORDER BY created_at DESC').fetchall()
              conn.close()
              
              tasks_list = [dict(task) for task in tasks]
              logger.info(f"Consultadas {len(tasks_list)} tareas")
              return jsonify({'tasks': tasks_list})

          @app.route('/api/tasks', methods=['POST'])
          def create_task():
              data = request.json
              conn = sqlite3.connect('tasks.db')
              conn.execute('INSERT INTO tasks (title, description) VALUES (?, ?)', 
                          (data['title'], data.get('description', '')))
              conn.commit()
              conn.close()
              
              logger.info(f"Tarea creada: {data['title']}")
              return jsonify({'message': 'Task created successfully'}), 201

          @app.route('/api/tasks/<int:task_id>', methods=['PUT'])
          def update_task(task_id):
              data = request.json
              conn = sqlite3.connect('tasks.db')
              conn.execute('UPDATE tasks SET status = ? WHERE id = ?', 
                          (data['status'], task_id))
              conn.commit()
              conn.close()
              
              logger.info(f"Tarea {task_id} actualizada a {data['status']}")
              return jsonify({'message': 'Task updated successfully'})

          @app.route('/api/tasks/<int:task_id>', methods=['DELETE'])
          def delete_task(task_id):
              conn = sqlite3.connect('tasks.db')
              conn.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
              conn.commit()
              conn.close()
              
              logger.info(f"Tarea {task_id} eliminada")
              return jsonify({'message': 'Task deleted successfully'})

          @app.route('/health')
          def health_check():
              conn = sqlite3.connect('tasks.db')
              task_count = conn.execute('SELECT COUNT(*) FROM tasks').fetchone()[0]
              conn.close()
              
              return jsonify({
                  'status': 'healthy',
                  'uptime': 'running',
                  'task_count': task_count,
                  'timestamp': datetime.now().isoformat()
              })

          if __name__ == '__main__':
              init_db()
              logger.info("Iniciando aplicaci√≥n Flask CRUD")
              app.run(host='0.0.0.0', port=5000, debug=True)

    - name: "Crear requirements.txt"
      copy:
        dest: "/tmp/{{ app_name }}/requirements.txt"
        content: |
          Flask==2.3.3
          Werkzeug==2.3.7

    - name: "Crear Dockerfile"
      copy:
        dest: "/tmp/{{ app_name }}/Dockerfile"
        content: |
          FROM python:3.9-slim
          
          WORKDIR /app
          
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          
          COPY app.py .
          
          EXPOSE 5000
          
          CMD ["python", "app.py"]

    - name: "Verificar si el contenedor ya existe"
      shell: docker ps -a --format "table {{.Names}}" | grep -w "{{ app_name }}"
      register: container_exists
      ignore_errors: yes
      changed_when: false

    - name: "Parar y eliminar contenedor existente"
      shell: docker stop {{ app_name }} && docker rm {{ app_name }}
      when: container_exists.rc == 0
      ignore_errors: yes

    - name: "Construir imagen Docker"
      shell: docker build -t {{ app_name }} .
      args:
        chdir: "/tmp/{{ app_name }}"
      register: build_result

    - name: "Mostrar resultado de construcci√≥n"
      debug:
        msg: "Imagen Docker construida exitosamente"
      when: build_result.rc == 0

    - name: "Ejecutar contenedor"
      shell: docker run -d --name {{ app_name }} -p {{ app_port }}:5000 {{ app_name }}
      register: run_result

    - name: "Esperar a que la aplicaci√≥n est√© lista"
      wait_for:
        port: "{{ app_port }}"
        host: "localhost"
        delay: 3
        timeout: 30

    - name: "Verificar estado del contenedor"
      shell: docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep {{ app_name }}
      register: container_status
      changed_when: false

    - name: "Realizar health check inicial"
      uri:
        url: "http://localhost:{{ app_port }}/health"
        method: GET
      register: health_check
      ignore_errors: yes

    - name: "Mostrar informaci√≥n de despliegue"
      debug:
        msg:
          - "================================"
          - "üöÄ APLICACI√ìN FLASK CRUD DESPLEGADA"
          - "================================"
          - "URL Principal: http://localhost:{{ app_port }}"
          - "Health Check: http://localhost:{{ app_port }}/health"
          - "API Endpoint: http://localhost:{{ app_port }}/api/tasks"
          - "Estado del contenedor: {{ container_status.stdout }}"
          - "Health Status: {{ health_check.json.status | default('Error') }}"
          - "Desplegado en: {{ fecha_ejecucion }} {{ hora_ejecucion }}"
          - "================================"
          - "Para parar: docker stop {{ app_name }}"
          - "Para eliminar: docker rm {{ app_name }}"
          - "================================" 