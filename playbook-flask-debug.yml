---
- name: "Flask CRUD DEBUG - ¬°A por todas!"
  hosts: localhost
  gather_facts: yes
  vars:
    app_name: "flask-debug"
    app_port: "5555"
    app_dir: "/var/tmp/{{ app_name }}"
    fecha_ejecucion: "{{ ansible_date_time.date }}"
    hora_ejecucion: "{{ ansible_date_time.time }}"
  
  tasks:
    - name: "üîç DEBUG - Informaci√≥n del entorno"
      debug:
        msg:
          - "================================"
          - "üöÄ INICIANDO FLASK DEBUG"
          - "================================"
          - "Hostname: {{ ansible_hostname }}"
          - "Usuario: {{ ansible_user_id }}"
          - "Directorio home: {{ ansible_env.HOME | default('No definido') }}"
          - "PATH: {{ ansible_env.PATH | default('No definido') }}"
          - "Directorio actual: {{ ansible_env.PWD | default('No definido') }}"
          - "Directorio app: {{ app_dir }}"
          - "Puerto: {{ app_port }}"
          - "================================"

    - name: "üêç Verificar Python y pip"
      shell: |
        echo "=== PYTHON INFO ==="
        python3 --version
        which python3
        echo "=== PIP INFO ==="
        pip3 --version || echo "pip3 no disponible"
        which pip3 || echo "pip3 no encontrado"
        echo "=== PYTHON PATH ==="
        python3 -c "import sys; print('\n'.join(sys.path))"
      register: python_info
      changed_when: false

    - name: "üìä Mostrar informaci√≥n de Python"
      debug:
        msg: "{{ python_info.stdout_lines }}"

    - name: "üìÅ Crear directorio persistente"
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
      register: dir_creation

    - name: "‚úÖ Verificar creaci√≥n de directorio"
      debug:
        msg: 
          - "Directorio creado: {{ dir_creation.path }}"
          - "Estado: {{ dir_creation.state }}"

    - name: "üîß Instalar Flask (forzado)"
      shell: |
        python3 -m pip install --user flask werkzeug --upgrade --force-reinstall
        echo "=== VERIFICACI√ìN ==="
        python3 -c "import flask; print(f'Flask {flask.__version__} instalado')"
      register: flask_install
      ignore_errors: yes

    - name: "üì¶ Mostrar resultado de instalaci√≥n Flask"
      debug:
        msg: "{{ flask_install.stdout_lines }}"

    - name: "üöÄ Crear aplicaci√≥n Flask S√öPER SIMPLE"
      copy:
        dest: "{{ app_dir }}/app.py"
        mode: '0755'
        content: |
          #!/usr/bin/env python3
          """
          Flask CRUD DEBUG - ¬°La versi√≥n que S√ç va a funcionar!
          """
          
          import sys
          import os
          sys.path.insert(0, os.path.expanduser('~/.local/lib/python3.9/site-packages'))
          
          try:
              from flask import Flask, jsonify, render_template_string
              print("‚úÖ Flask importado correctamente")
          except ImportError as e:
              print(f"‚ùå Error importando Flask: {e}")
              sys.exit(1)
          
          import sqlite3
          from datetime import datetime
          import json
          import threading
          import time

          app = Flask(__name__)
          
          # Base de datos
          DB_PATH = "{{ app_dir }}/tasks.db"
          
          def init_db():
              """Inicializar base de datos"""
              try:
                  conn = sqlite3.connect(DB_PATH)
                  conn.execute('''
                      CREATE TABLE IF NOT EXISTS tasks (
                          id INTEGER PRIMARY KEY AUTOINCREMENT,
                          title TEXT NOT NULL,
                          description TEXT,
                          status TEXT DEFAULT 'pending',
                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                      )
                  ''')
                  
                  # Datos de ejemplo
                  conn.execute('''
                      INSERT OR IGNORE INTO tasks (id, title, description, status) VALUES 
                      (1, 'üéâ ¬°Flask funcionando en AWX!', 'Esta tarea se cre√≥ autom√°ticamente', 'completed'),
                      (2, 'Probar API REST', 'Verificar que todos los endpoints funcionen', 'pending'),
                      (3, 'Celebrar el √©xito', 'Porque lo logramos contra todo pron√≥stico', 'pending')
                  ''')
                  
                  conn.commit()
                  conn.close()
                  print("‚úÖ Base de datos inicializada")
                  return True
              except Exception as e:
                  print(f"‚ùå Error en DB: {e}")
                  return False

          # Template HTML minimalista pero funcional
          HTML_TEMPLATE = '''
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>üéâ ¬°FLASK EN AWX FUNCIONA!</title>
              <style>
                  body { 
                      font-family: Arial, sans-serif; 
                      background: linear-gradient(45deg, #FF6B6B, #4ECDC4, #45B7D1, #96CEB4);
                      background-size: 400% 400%;
                      animation: gradientShift 8s ease infinite;
                      margin: 0;
                      padding: 20px;
                      min-height: 100vh;
                  }
                  @keyframes gradientShift {
                      0% { background-position: 0% 50%; }
                      50% { background-position: 100% 50%; }
                      100% { background-position: 0% 50%; }
                  }
                  .container { 
                      max-width: 800px; 
                      margin: 0 auto; 
                      background: rgba(255,255,255,0.95);
                      border-radius: 20px;
                      padding: 30px;
                      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                      backdrop-filter: blur(10px);
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 30px;
                  }
                  .header h1 {
                      font-size: 3em;
                      margin: 0;
                      background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
                      -webkit-background-clip: text;
                      -webkit-text-fill-color: transparent;
                      background-clip: text;
                  }
                  .success-badge {
                      display: inline-block;
                      background: linear-gradient(45deg, #28a745, #20c997);
                      color: white;
                      padding: 10px 20px;
                      border-radius: 25px;
                      font-weight: bold;
                      margin: 10px;
                      animation: pulse 2s infinite;
                  }
                  @keyframes pulse {
                      0% { transform: scale(1); }
                      50% { transform: scale(1.05); }
                      100% { transform: scale(1); }
                  }
                  .stats {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                      gap: 20px;
                      margin: 30px 0;
                  }
                  .stat-card {
                      background: linear-gradient(135deg, #667eea, #764ba2);
                      color: white;
                      padding: 20px;
                      border-radius: 15px;
                      text-align: center;
                      transform: translateY(0);
                      transition: transform 0.3s ease;
                  }
                  .stat-card:hover {
                      transform: translateY(-5px);
                  }
                  .stat-number {
                      font-size: 2.5em;
                      font-weight: bold;
                      margin-bottom: 5px;
                  }
                  .task-form {
                      background: #f8f9fa;
                      padding: 25px;
                      border-radius: 15px;
                      margin: 20px 0;
                  }
                  input, textarea {
                      width: 100%;
                      padding: 12px;
                      border: 2px solid #e9ecef;
                      border-radius: 10px;
                      margin: 10px 0;
                      font-size: 16px;
                      transition: all 0.3s ease;
                  }
                  input:focus, textarea:focus {
                      outline: none;
                      border-color: #667eea;
                      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                  }
                  button {
                      background: linear-gradient(45deg, #667eea, #764ba2);
                      color: white;
                      border: none;
                      padding: 12px 25px;
                      border-radius: 25px;
                      cursor: pointer;
                      font-weight: bold;
                      margin: 10px 5px;
                      transition: all 0.3s ease;
                  }
                  button:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
                  }
                  .task {
                      background: white;
                      border: 1px solid #e9ecef;
                      border-radius: 15px;
                      padding: 20px;
                      margin: 15px 0;
                      transition: all 0.3s ease;
                  }
                  .task:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                  }
                  .pending { border-left: 5px solid #ffc107; }
                  .completed { border-left: 5px solid #28a745; }
                  .server-info {
                      background: linear-gradient(135deg, #e3f2fd, #bbdefb);
                      padding: 20px;
                      border-radius: 15px;
                      margin: 20px 0;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üéâ ¬°√âXITO TOTAL!</h1>
                      <div class="success-badge">‚úÖ Flask corriendo en AWX</div>
                      <div class="success-badge">üöÄ Aplicaci√≥n REAL</div>
                      <div class="success-badge">üí™ ¬°Lo logramos!</div>
                  </div>
                  
                  <div class="server-info">
                      <h3>üì° Informaci√≥n del Servidor</h3>
                      <p><strong>üê≥ Ejecut√°ndose en:</strong> Contenedor AWX</p>
                      <p><strong>üåê Puerto:</strong> {{ app_port }}</p>
                      <p><strong>üìä Base de datos:</strong> {{ db_path }}</p>
                      <p><strong>‚è∞ Iniciado:</strong> {{ now }}</p>
                      <p><strong>üéØ Estado:</strong> <span style="color: #28a745; font-weight: bold;">FUNCIONANDO PERFECTAMENTE</span></p>
                  </div>
                  
                  <div class="stats">
                      <div class="stat-card">
                          <div class="stat-number" id="total">0</div>
                          <div>Total Tareas</div>
                      </div>
                      <div class="stat-card">
                          <div class="stat-number" id="pending">0</div>
                          <div>Pendientes</div>
                      </div>
                      <div class="stat-card">
                          <div class="stat-number" id="completed">0</div>
                          <div>Completadas</div>
                      </div>
                  </div>
                  
                  <div class="task-form">
                      <h3>‚ûï Crear Nueva Tarea</h3>
                      <form id="taskForm">
                          <input type="text" id="title" placeholder="T√≠tulo de la tarea" required>
                          <textarea id="description" placeholder="Descripci√≥n" rows="3"></textarea>
                          <button type="submit">‚úÖ Crear Tarea</button>
                          <button type="button" onclick="loadTasks()">üîÑ Refrescar</button>
                          <button type="button" onclick="testAPI()">üß™ Test API</button>
                      </form>
                  </div>
                  
                  <h3>üìã Lista de Tareas</h3>
                  <div id="tasks"></div>
                  
                  <div style="text-align: center; margin-top: 30px;">
                      <button onclick="celebrate()">üéâ ¬°CELEBRAR!</button>
                  </div>
              </div>

              <script>
                  let taskData = [];
                  
                  document.addEventListener('DOMContentLoaded', function() {
                      loadTasks();
                      setInterval(loadTasks, 10000);
                  });
                  
                  function loadTasks() {
                      fetch('/api/tasks')
                          .then(response => response.json())
                          .then(data => {
                              if (data.tasks) {
                                  taskData = data.tasks;
                                  displayTasks(data.tasks);
                                  updateStats(data.tasks);
                              }
                          })
                          .catch(error => {
                              console.error('Error:', error);
                              document.getElementById('tasks').innerHTML = 
                                  '<div style="color: red; padding: 20px;">Error cargando tareas: ' + error.message + '</div>';
                          });
                  }
                  
                  function displayTasks(tasks) {
                      const container = document.getElementById('tasks');
                      if (tasks.length === 0) {
                          container.innerHTML = '<div style="text-align: center; padding: 20px;">No hay tareas. ¬°Crea la primera!</div>';
                          return;
                      }
                      
                      container.innerHTML = tasks.map(task => `
                          <div class="task ${task.status}">
                              <h4>${task.title}</h4>
                              <p>${task.description || 'Sin descripci√≥n'}</p>
                              <p><strong>Estado:</strong> ${task.status === 'completed' ? '‚úÖ Completada' : '‚è≥ Pendiente'}</p>
                              <p><strong>Creada:</strong> ${task.created_at}</p>
                              <button onclick="toggleTask(${task.id}, '${task.status}')" 
                                      style="background: ${task.status === 'pending' ? '#28a745' : '#ffc107'}">
                                  ${task.status === 'pending' ? '‚úÖ Completar' : 'üîÑ Reabrir'}
                              </button>
                              <button onclick="deleteTask(${task.id})" style="background: #dc3545">
                                  üóëÔ∏è Eliminar
                              </button>
                          </div>
                      `).join('');
                  }
                  
                  function updateStats(tasks) {
                      document.getElementById('total').textContent = tasks.length;
                      document.getElementById('pending').textContent = tasks.filter(t => t.status === 'pending').length;
                      document.getElementById('completed').textContent = tasks.filter(t => t.status === 'completed').length;
                  }
                  
                  document.getElementById('taskForm').addEventListener('submit', function(e) {
                      e.preventDefault();
                      const title = document.getElementById('title').value.trim();
                      const description = document.getElementById('description').value.trim();
                      
                      if (!title) return;
                      
                      fetch('/api/tasks', {
                          method: 'POST',
                          headers: {'Content-Type': 'application/json'},
                          body: JSON.stringify({title, description})
                      }).then(response => response.json())
                        .then(() => {
                            document.getElementById('title').value = '';
                            document.getElementById('description').value = '';
                            loadTasks();
                            alert('‚úÖ Tarea creada!');
                        })
                        .catch(error => alert('Error: ' + error.message));
                  });
                  
                  function toggleTask(id, currentStatus) {
                      const newStatus = currentStatus === 'pending' ? 'completed' : 'pending';
                      fetch(`/api/tasks/${id}`, {
                          method: 'PUT',
                          headers: {'Content-Type': 'application/json'},
                          body: JSON.stringify({status: newStatus})
                      }).then(() => {
                          loadTasks();
                          alert(`‚úÖ Tarea ${newStatus === 'completed' ? 'completada' : 'reabierta'}!`);
                      });
                  }
                  
                  function deleteTask(id) {
                      if (confirm('¬øEliminar tarea?')) {
                          fetch(`/api/tasks/${id}`, {method: 'DELETE'})
                              .then(() => {
                                  loadTasks();
                                  alert('‚úÖ Tarea eliminada!');
                              });
                      }
                  }
                  
                  function testAPI() {
                      fetch('/health')
                          .then(response => response.json())
                          .then(data => {
                              alert(`üè• Health Check OK!\\n\\nStatus: ${data.status}\\nTareas: ${data.task_count}\\nVersi√≥n: ${data.version}`);
                          })
                          .catch(error => alert('‚ùå Error en API: ' + error.message));
                  }
                  
                  function celebrate() {
                      alert('üéâüéâüéâ\\n\\n¬°FLASK FUNCIONANDO EN AWX!\\n\\n¬°LO LOGRAMOS!\\n\\nüöÄüí™üî•');
                      
                      // Efecto visual
                      document.body.style.animation = 'none';
                      setTimeout(() => {
                          document.body.style.animation = 'gradientShift 2s ease infinite';
                      }, 100);
                  }
              </script>
          </body>
          </html>
          '''

          @app.route('/')
          def index():
              return render_template_string(
                  HTML_TEMPLATE, 
                  now=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                  app_port="{{ app_port }}",
                  db_path=DB_PATH
              )

          @app.route('/api/tasks', methods=['GET'])
          def get_tasks():
              try:
                  conn = sqlite3.connect(DB_PATH)
                  conn.row_factory = sqlite3.Row
                  tasks = conn.execute('SELECT * FROM tasks ORDER BY created_at DESC').fetchall()
                  conn.close()
                  
                  return jsonify({'tasks': [dict(task) for task in tasks], 'status': 'success'})
              except Exception as e:
                  return jsonify({'error': str(e)}), 500

          @app.route('/api/tasks', methods=['POST'])
          def create_task():
              try:
                  data = request.json
                  conn = sqlite3.connect(DB_PATH)
                  conn.execute('INSERT INTO tasks (title, description) VALUES (?, ?)', 
                              (data['title'], data.get('description', '')))
                  conn.commit()
                  conn.close()
                  return jsonify({'message': 'Success'}), 201
              except Exception as e:
                  return jsonify({'error': str(e)}), 500

          @app.route('/api/tasks/<int:task_id>', methods=['PUT'])
          def update_task(task_id):
              try:
                  data = request.json
                  conn = sqlite3.connect(DB_PATH)
                  conn.execute('UPDATE tasks SET status = ? WHERE id = ?', (data['status'], task_id))
                  conn.commit()
                  conn.close()
                  return jsonify({'message': 'Success'})
              except Exception as e:
                  return jsonify({'error': str(e)}), 500

          @app.route('/api/tasks/<int:task_id>', methods=['DELETE'])
          def delete_task(task_id):
              try:
                  conn = sqlite3.connect(DB_PATH)
                  conn.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
                  conn.commit()
                  conn.close()
                  return jsonify({'message': 'Success'})
              except Exception as e:
                  return jsonify({'error': str(e)}), 500

          @app.route('/health')
          def health_check():
              try:
                  conn = sqlite3.connect(DB_PATH)
                  task_count = conn.execute('SELECT COUNT(*) FROM tasks').fetchone()[0]
                  conn.close()
                  
                  return jsonify({
                      'status': 'healthy',
                      'task_count': task_count,
                      'timestamp': datetime.now().isoformat(),
                      'version': 'DEBUG-1.0',
                      'message': '¬°Flask funcionando en AWX!'
                  })
              except Exception as e:
                  return jsonify({'status': 'error', 'error': str(e)}), 500

          if __name__ == '__main__':
              print("üöÄ Iniciando Flask DEBUG...")
              print(f"üìÅ Directorio: {{ app_dir }}")
              print(f"üóÑÔ∏è Base de datos: {DB_PATH}")
              print(f"üåê Puerto: {{ app_port }}")
              
              if not init_db():
                  print("‚ùå Error en base de datos")
                  sys.exit(1)
              
              print("‚úÖ Todo listo. Iniciando servidor...")
              try:
                  app.run(host='0.0.0.0', port={{ app_port }}, debug=False, threaded=True)
              except Exception as e:
                  print(f"‚ùå Error iniciando Flask: {e}")
                  sys.exit(1)

    - name: "üìù Crear logs de inicio"
      copy:
        dest: "{{ app_dir }}/debug.log"
        content: |
          ================================
          FLASK DEBUG LOG
          ================================
          Fecha: {{ fecha_ejecucion }} {{ hora_ejecucion }}
          Directorio: {{ app_dir }}
          Puerto: {{ app_port }}
          Usuario: {{ ansible_user_id }}
          Hostname: {{ ansible_hostname }}
          ================================

    - name: "üöÄ MOMENTO DE LA VERDAD - Ejecutar Flask"
      shell: |
        cd {{ app_dir }}
        echo "üöÄ Iniciando Flask..." >> debug.log
        python3 app.py >> debug.log 2>&1 &
        FLASK_PID=$!
        echo "PID: $FLASK_PID" >> debug.log
        echo $FLASK_PID > flask.pid
        sleep 3
        if kill -0 $FLASK_PID 2>/dev/null; then
          echo "‚úÖ Flask iniciado correctamente con PID $FLASK_PID" >> debug.log
          echo "SUCCESS"
        else
          echo "‚ùå Flask fall√≥ al iniciar" >> debug.log
          echo "FAILED"
        fi
      register: flask_start
      async: 0
      poll: 0

    - name: "‚è≥ Esperar que Flask est√© listo"
      wait_for:
        port: "{{ app_port }}"
        host: "127.0.0.1"
        delay: 2
        timeout: 15
      register: port_check
      ignore_errors: yes

    - name: "üè• Health Check"
      uri:
        url: "http://127.0.0.1:{{ app_port }}/health"
        method: GET
        timeout: 10
      register: health_check
      ignore_errors: yes
      retries: 3
      delay: 2

    - name: "üìä Verificar proceso Flask"
      shell: |
        cd {{ app_dir }}
        if [ -f flask.pid ]; then
          PID=$(cat flask.pid)
          if kill -0 $PID 2>/dev/null; then
            echo "‚úÖ Proceso Flask corriendo (PID: $PID)"
            ps aux | grep $PID | grep -v grep
          else
            echo "‚ùå Proceso Flask no encontrado"
          fi
        else
          echo "‚ùå Archivo PID no encontrado"
        fi
      register: process_check
      ignore_errors: yes
      changed_when: false

    - name: "üìù Mostrar logs de Flask"
      shell: tail -20 {{ app_dir }}/debug.log
      register: flask_logs
      ignore_errors: yes
      changed_when: false

    - name: "üåê Informaci√≥n de red"
      shell: |
        echo "=== PUERTOS ABIERTOS ==="
        netstat -tlnp 2>/dev/null | grep :{{ app_port }} || echo "Puerto {{ app_port }} no visible"
        echo "=== PROCESOS PYTHON ==="
        ps aux | grep python | grep -v grep
        echo "=== CURL LOCAL ==="
        curl -s -m 5 http://127.0.0.1:{{ app_port }}/health || echo "Curl fall√≥"
      register: network_info
      ignore_errors: yes
      changed_when: false

    - name: "üéâ RESULTADO FINAL"
      debug:
        msg:
          - "================================"
          - "üéØ RESULTADO FINAL"
          - "================================"
          - "üì± Aplicaci√≥n: {{ app_name }}"
          - "üåê Puerto: {{ app_port }}"
          - "üìÅ Directorio: {{ app_dir }}"
          - "‚è∞ Ejecutado: {{ fecha_ejecucion }} {{ hora_ejecucion }}"
          - "================================"
          - "üîç DIAGN√ìSTICO:"
          - "Puerto disponible: {{ 'S√ç ‚úÖ' if port_check is succeeded else 'NO ‚ùå' }}"
          - "Health check: {{ 'OK ‚úÖ' if health_check.status == 200 else 'FAIL ‚ùå' }}"
          - "Proceso Flask: {{ 'RUNNING ‚úÖ' if 'corriendo' in process_check.stdout else 'STOPPED ‚ùå' }}"
          - "================================"
          - "üöÄ ACCESO (si funciona):"
          - "kubectl port-forward -n awx deployment/awx-local-task {{ app_port }}:{{ app_port }}"
          - "Luego: http://localhost:{{ app_port }}"
          - "================================"

    - name: "üìã Logs detallados"
      debug:
        msg:
          - "üîç LOGS DE FLASK:"
          - "{{ flask_logs.stdout_lines | default(['No logs disponibles']) | join('\n') }}"
          - ""
          - "üåê INFO DE RED:"
          - "{{ network_info.stdout_lines | default(['No info disponible']) | join('\n') }}"
          - ""
          - "üìä PROCESO:"
          - "{{ process_check.stdout_lines | default(['No info disponible']) | join('\n') }}"

    - name: "üíæ Crear reporte final"
      copy:
        dest: "{{ app_dir }}/RESULTADO.txt"
        content: |
          ================================
          FLASK DEBUG - RESULTADO FINAL
          ================================
          Fecha: {{ fecha_ejecucion }} {{ hora_ejecucion }}
          
          CONFIGURACI√ìN:
          - Aplicaci√≥n: {{ app_name }}
          - Puerto: {{ app_port }}
          - Directorio: {{ app_dir }}
          
          DIAGN√ìSTICO:
          - Puerto disponible: {{ 'S√ç' if port_check is succeeded else 'NO' }}
          - Health check: {{ 'OK' if health_check.status == 200 else 'FAIL' }}
          - Proceso Flask: {{ 'RUNNING' if 'corriendo' in process_check.stdout else 'STOPPED' }}
          
          {% if health_check.json is defined %}
          HEALTH CHECK RESPONSE:
          {{ health_check.json | to_nice_json }}
          {% endif %}
          
          ACCESO:
          kubectl port-forward -n awx deployment/awx-local-task {{ app_port }}:{{ app_port }}
          http://localhost:{{ app_port }}
          
          LOGS:
          {{ flask_logs.stdout | default('No logs') }}
          
          RED:
          {{ network_info.stdout | default('No info') }}
          
          ================================ 